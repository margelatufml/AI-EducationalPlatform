apiVersion: v1
kind: ConfigMap
metadata:
  name: populate-dummy-data-script

data:
  populate-dummy-data.py: |
    import uuid
    import mysql.connector
    import time
    import datetime
    time.sleep(10)  # Wait for MySQL to be ready
    conn = mysql.connector.connect(host='mysql', port=3306, user='root', password='password', database='intelecta_db')
    cur = conn.cursor()
    def safe_execute(sql, params):
        try:
            cur.execute(sql, params)
        except Exception as e:
            print(f"Error executing: {sql} with params {params}\nError: {e}")
    # Clean and repopulate referenced tables with valid UUIDs
    for table in ['user_progress', 'test', 'exercises', 'chapters', 'users', 'subject', 'user_progres', 'user', 'chapter_user_finished', 'chapter_user_started', 'class_user', 'exercise_steps', 'refresh_token', 'user_chapter_last_error_times', 'user_chapter_strikes']:
        try:
            cur.execute(f"TRUNCATE TABLE {table}")
        except Exception:
            pass
    # Repopulate subject (binary(16) id)
    subject_ids = [uuid.uuid4().bytes for _ in range(3)]
    for i, sid in enumerate(subject_ids):
        safe_execute("INSERT INTO subject (id, name) VALUES (%s, %s)", (sid, f'Subject {i+1}'))
    # Repopulate chapters (binary(16) id, subject_id)
    chapter_ids = [uuid.uuid4().bytes for _ in range(3)]
    for i, cid in enumerate(chapter_ids):
        safe_execute("INSERT INTO chapters (id, name, subject_id) VALUES (%s, %s, %s)", (cid, f'Chapter {i+1}', subject_ids[i % len(subject_ids)]))
    # Repopulate users (binary(16) id)
    user_ids = [uuid.uuid4().bytes for _ in range(3)]
    for i, uid in enumerate(user_ids):
        safe_execute("INSERT INTO users (id, email, first_name, last_name, password, role) VALUES (%s, %s, %s, %s, %s, %s)", (uid, f'user{i+1}@example.com', f'First{i+1}', f'Last{i+1}', 'password', 'student'))
    # Repopulate exercises (binary(16) id, chapter_id)
    exercise_ids = [uuid.uuid4().bytes for _ in range(3)]
    for i, eid in enumerate(exercise_ids):
        safe_execute("INSERT INTO exercises (id, name, description, answer, points, chapter_id) VALUES (%s, %s, %s, %s, %s, %s)", (eid, f'Exercise {i+1}', f'Description {i+1}', f'Answer {i+1}', 10, chapter_ids[i % len(chapter_ids)]))
    # Repopulate class_user (binary(16) id)
    class_user_ids = [uuid.uuid4().bytes for _ in range(3)]
    for i, cid in enumerate(class_user_ids):
        safe_execute("INSERT INTO class_user (id, class_number, profil) VALUES (%s, %s, %s)", (cid, i+1, f'Profile {i+1}'))
    # Insert test data (char(36) id, subject_id)
    test_ids = [str(uuid.uuid4()) for _ in range(5)]
    subject_ids_str = [str(uuid.UUID(bytes=sid)) for sid in subject_ids]
    for i, test_id in enumerate(test_ids):
        subject_id = subject_ids_str[i % len(subject_ids_str)]
        grades = 10 - i
        test_type = ['midterm', 'final', 'quiz', 'midterm', 'quiz'][i]
        test_ans_type = ['multiple', 'open', 'multiple', 'open', 'multiple'][i]
        safe_execute("INSERT INTO test (id, grades, subject_id, test_type, test_ans_type) VALUES (%s, %s, %s, %s, %s)", (test_id, grades, subject_id, test_type, test_ans_type))
    # Insert user_progress dummy data (char(36) id, user_id, chapter_id, exercise_id)
    user_ids_str = [str(uuid.UUID(bytes=uid)) for uid in user_ids]
    chapter_ids_str = [str(uuid.UUID(bytes=cid)) for cid in chapter_ids]
    exercise_ids_str = [str(uuid.UUID(bytes=eid)) for eid in exercise_ids]
    for i in range(10):
        up_id = str(uuid.uuid4())
        user_id = user_ids_str[i % len(user_ids_str)]
        chapter_id = chapter_ids_str[i % len(chapter_ids_str)]
        exercise_id = exercise_ids_str[i % len(exercise_ids_str)]
        safe_execute("INSERT INTO user_progress (id, user_id, chapter_id, exercise_id) VALUES (%s, %s, %s, %s)", (up_id, user_id, chapter_id, exercise_id))
    conn.commit()
    cur.close()
    conn.close()
    print('Dummy data inserted successfully.') 